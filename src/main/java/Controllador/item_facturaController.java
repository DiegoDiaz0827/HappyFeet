/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Controllador;
import DAO.Item_FacturasDAO;
import Model.Entities.Items_factura;
import Model.Enums.itemsFactura;
import java.math.BigDecimal;
import java.util.List;
/**
 *
 * @author camper
 */
public class item_facturaController {
    private final Item_FacturasDAO itemFacturasDAO;

    // Inyecci√≥n de dependencias
    public item_facturaController(Item_FacturasDAO itemFacturasDAO) {
        this.itemFacturasDAO = itemFacturasDAO;
    }

    // --- 1Ô∏è‚É£ Registrar un nuevo √≠tem de factura (CREATE)
    /**
     * Registra un nuevo √≠tem de factura validando su coherencia.
     * @param item El objeto Items_factura a registrar.
     * @return true si se registra correctamente, false en caso contrario.
     */
    public boolean registrarItemFactura(Items_factura item) {
        
        // 1. Validaciones b√°sicas de IDs y cantidades
        if (item.getFacturaId() <= 0) {
            System.out.println("‚ö†Ô∏è ID de Factura inv√°lido. El √≠tem debe estar asociado a una factura.");
            return false;
        }
        if (item.getCantidad() <= 0) {
            System.out.println("‚ö†Ô∏è La cantidad debe ser mayor a cero.");
            return false;
        }
        if (item.getPrecioUnitario() == null || item.getPrecioUnitario().compareTo(BigDecimal.ZERO) < 0) {
            System.out.println("‚ö†Ô∏è El precio unitario no puede ser nulo o negativo.");
            return false;
        }

        // 2. Validaciones de coherencia seg√∫n el tipo de √≠tem
        if (item.getTipoItem() == null) {
            System.out.println("‚ö†Ô∏è El tipo de √≠tem (PRODUCTO/SERVICIO) es obligatorio.");
            return false;
        }
        
        if (item.getTipoItem() == itemsFactura.PRODUCTO) {
            // Debe tener producto_id, y servicio_id debe ser null.
            if (item.getProductoId() == null || item.getProductoId() <= 0) {
                System.out.println("‚ö†Ô∏è Para tipo PRODUCTO, el ID del producto es obligatorio.");
                return false;
            }
            if (item.getServicioId() != null || (item.getServicioDescripcion() != null && !item.getServicioDescripcion().isBlank())) {
                 System.out.println("‚ö†Ô∏è Para tipo PRODUCTO, los campos de servicio deben ser nulos/vac√≠os.");
                 // Puedes optar por limpiar los campos de servicio aqu√≠ si quieres ser flexible:
                 // item.setServicioId(null);
                 // item.setServicioDescripcion(null);
            }
        } else if (item.getTipoItem() == itemsFactura.SERVICIO) {
            // Debe tener servicio_id O servicio_descripcion, y producto_id debe ser null.
            if ((item.getServicioId() == null || item.getServicioId() <= 0) && (item.getServicioDescripcion() == null || item.getServicioDescripcion().isBlank())) {
                System.out.println("‚ö†Ô∏è Para tipo SERVICIO, se requiere el ID de servicio o una descripci√≥n.");
                return false;
            }
            if (item.getProductoId() != null) {
                System.out.println("‚ö†Ô∏è Para tipo SERVICIO, el ID del producto debe ser nulo.");
                // Puedes optar por limpiar el campo de producto aqu√≠:
                // item.setProductoId(null);
            }
        }
        
        // 3. Recalcular Subtotal antes de guardar (por seguridad)
        // Aunque el DAO lo guarda, el controlador deber√≠a asegurar que el dato sea correcto.
        BigDecimal subtotalCalculado = item.getPrecioUnitario().multiply(new BigDecimal(item.getCantidad()));
        if (item.getSubtotal() == null || !item.getSubtotal().equals(subtotalCalculado)) {
            item.setSubtotal(subtotalCalculado);
            System.out.println("‚ÑπÔ∏è Subtotal recalculado y corregido: " + subtotalCalculado);
        }

        try {
            itemFacturasDAO.agregar(item);
            System.out.println("‚úÖ √çtem de Factura registrado correctamente con ID: " + item.getId());
            return true;
        } catch (Exception e) {
            System.out.println("‚ùå Error al registrar √≠tem de factura: " + e.getMessage());
            return false;
        }
    }

    // --- 2Ô∏è‚É£ Listar √≠tems por ID de Factura (READ ALL by Parent ID)
    /**
     * Lista todos los √≠tems asociados a una factura espec√≠fica.
     * @param facturaId El ID de la factura.
     * @return Una lista de Items_factura.
     */
    public List<Items_factura> listarItemsPorFactura(int facturaId) {
        if (facturaId <= 0) {
            System.out.println("‚ö†Ô∏è ID de factura inv√°lido para listar √≠tems.");
            return List.of(); // Devuelve una lista vac√≠a
        }
        return itemFacturasDAO.listarPorFactura(facturaId);
    }

    // --- 3Ô∏è‚É£ Buscar √≠tem de factura por ID (READ ONE)
    /**
     * Obtiene un √≠tem de factura por su ID.
     * @param id El ID del √≠tem a buscar.
     * @return El objeto Items_factura si se encuentra, o null.
     */
    public Items_factura obtenerItemPorId(int id) {
        if (id <= 0) {
            System.out.println("‚ö†Ô∏è ID de √≠tem inv√°lido para la b√∫squeda.");
            return null;
        }
        Items_factura item = itemFacturasDAO.obtenerPorId(id);
        if (item == null) {
            System.out.println("‚ÑπÔ∏è √çtem con ID " + id + " no encontrado.");
        }
        return item;
    }

    // --- 4Ô∏è‚É£ Actualizar √≠tem de factura existente (UPDATE)
    /**
     * Actualiza un √≠tem de factura existente. Utiliza las mismas validaciones de registro.
     * @param item El objeto Items_factura con los datos actualizados.
     * @return true si se actualiza correctamente, false en caso contrario.
     */
    public boolean actualizarItemFactura(Items_factura item) {
        if (item.getId() <= 0) {
            System.out.println("‚ö†Ô∏è El √≠tem debe tener un ID v√°lido para ser actualizado.");
            return false;
        }
        
        // Reutilizar la l√≥gica de validaci√≥n de registro
        // Si las validaciones fallan, registrarItemFactura devuelve false.
        // Si quieres evitar el mensaje de '√çtem de Factura registrado correctamente',
        // podr√≠as externalizar la l√≥gica de validaci√≥n a un m√©todo privado.
        
        // Por ahora, solo verificamos las reglas b√°sicas, asumiendo que el item ya existe.
        if (item.getCantidad() <= 0) {
            System.out.println("‚ö†Ô∏è La cantidad debe ser mayor a cero.");
            return false;
        }
        // ... (Aqu√≠ ir√≠an m√°s validaciones si no se reusa la l√≥gica de registro)
        
        // Recalcular Subtotal antes de actualizar (por seguridad)
        BigDecimal subtotalCalculado = item.getPrecioUnitario().multiply(new BigDecimal(item.getCantidad()));
        if (item.getSubtotal() == null || !item.getSubtotal().equals(subtotalCalculado)) {
            item.setSubtotal(subtotalCalculado);
            System.out.println("‚ÑπÔ∏è Subtotal recalculado y corregido para la actualizaci√≥n: " + subtotalCalculado);
        }

        boolean exito = itemFacturasDAO.actualizar(item);
        System.out.println(exito ? "‚úÖ √çtem de Factura actualizado correctamente." : "‚ùå No se pudo actualizar el √≠tem (ID no encontrado o error en DAO).");
        return exito;
    }

    // --- 5Ô∏è‚É£ Eliminar √≠tem de factura (DELETE)
    /**
     * Elimina un √≠tem de factura por su ID.
     * @param id El ID del √≠tem a eliminar.
     * @return true si se elimina correctamente, false si el ID es inv√°lido o no se encuentra.
     */
    public boolean eliminarItemFactura(int id) {
        if (id <= 0) {
            System.out.println("‚ö†Ô∏è ID de √≠tem de factura inv√°lido.");
            return false;
        }

        boolean exito = itemFacturasDAO.eliminar(id);
        System.out.println(exito ? "üóëÔ∏è √çtem de Factura eliminado correctamente." : "‚ùå No se encontr√≥ el √≠tem con ese ID para eliminar.");
        return exito;
    }
}
