/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Controllador;
import DAO.Mascotas_adopcionDAO;
import Model.Entities.mascotas_adopcion;
import Model.Enums.EstadoAdopcion;
import java.util.Date;
import java.util.List;
/**
 *
 * @author camper
 */
public class mascotas_adopcionController {
    
private final Mascotas_adopcionDAO mascotasAdopcionDAO;


    public mascotas_adopcionController(Mascotas_adopcionDAO mascotasAdopcionDAO) {
        this.mascotasAdopcionDAO = mascotasAdopcionDAO;
    }

    // 1Ô∏è Registrar un nuevo registro de adopci√≥n 
 
    public boolean registrarMascotaAdopcion(mascotas_adopcion mascotaAdopcion) {
        
        if (mascotaAdopcion.getMascotaId() <= 0) {
            System.out.println("‚ö†Ô∏è ID de mascota inv√°lido. Debe estar asociado a una mascota existente.");
            return false;
        }
        if (mascotaAdopcion.getFechaIngreso() == null || mascotaAdopcion.getFechaIngreso().after(new Date())) {
            System.out.println("‚ö†Ô∏è La fecha de ingreso es obligatoria y no puede ser futura.");
            return false;
        }
        if (mascotaAdopcion.getMotivoIngreso() == null || mascotaAdopcion.getMotivoIngreso().isBlank()) {
            System.out.println("‚ö†Ô∏è El motivo de ingreso al sistema de adopci√≥n es obligatorio.");
            return false;
        }
        
        if (mascotaAdopcion.getEstado() == null) {
            mascotaAdopcion.setEstado(EstadoAdopcion.DISPONIBLE);
        } else if (mascotaAdopcion.getEstado() == EstadoAdopcion.ADOPTADA) {
             System.out.println("‚ö†Ô∏è No se puede registrar inicialmente una mascota en estado ADOPTADA. Estableciendo a DISPONIBLE.");
             mascotaAdopcion.setEstado(EstadoAdopcion.DISPONIBLE);
        }

        try {
            mascotasAdopcionDAO.agregar(mascotaAdopcion);
            System.out.println("‚úÖ Mascota registrada para adopci√≥n correctamente con ID: " + mascotaAdopcion.getId());
            return true;
        } catch (Exception e) {
            System.out.println("‚ùå Error al registrar mascota para adopci√≥n: " + e.getMessage());
            return false;
        }
    }

    //  2Ô∏è Listar todos los registros de adopci√≥n (READ)
    public List<mascotas_adopcion> listarMascotasAdopcion() {
        return mascotasAdopcionDAO.listar();
    }

    // Buscar registro de adopci√≥n por ID 
   
    public mascotas_adopcion obtenerMascotaAdopcionPorId(int id) {
        if (id <= 0) {
            System.out.println("‚ö†Ô∏è ID inv√°lido para la b√∫squeda.");
            return null;
        }
        mascotas_adopcion mascota = mascotasAdopcionDAO.obtenerPorId(id);
        if (mascota == null) {
            System.out.println("‚ÑπÔ∏è Registro de adopci√≥n con ID " + id + " no encontrado.");
        }
        return mascota;
    }

    //  4Ô∏è Actualizar registro de adopci√≥n existente (UPDATE)
   
    public boolean actualizarMascotaAdopcion(mascotas_adopcion mascotaAdopcion) {
        if (mascotaAdopcion.getId() <= 0) {
            System.out.println("‚ö†Ô∏è El registro debe tener un ID v√°lido para ser actualizado.");
            return false;
        }
        if (mascotaAdopcion.getMascotaId() <= 0) {
             System.out.println("‚ö†Ô∏è El ID de mascota no puede ser inv√°lido al actualizar.");
             return false;
        }
        if (mascotaAdopcion.getEstado() == null) {
             System.out.println("‚ö†Ô∏è El estado de adopci√≥n es obligatorio.");
             return false;
        }

        boolean exito = mascotasAdopcionDAO.actualizar(mascotaAdopcion);
        System.out.println(exito ? "‚úÖ Registro de Adopci√≥n actualizado correctamente." : "‚ùå No se pudo actualizar el registro (ID no encontrado o error en DAO).");
        return exito;
    }

    //  5Ô∏è Eliminar registro de adopci√≥n (DELETE)
 
    public boolean eliminarMascotaAdopcion(int id) {
        if (id <= 0) {
            System.out.println("‚ö†Ô∏è ID de registro de adopci√≥n inv√°lido.");
            return false;
        }

        boolean exito = mascotasAdopcionDAO.eliminar(id);
        System.out.println(exito ? "üóëÔ∏è Registro de Adopci√≥n eliminado correctamente." : "‚ùå No se encontr√≥ el registro con ese ID para eliminar.");
        return exito;
    }
    

    public boolean marcarComoAdoptada(int id) {
        mascotas_adopcion mascotaAdopcion = obtenerMascotaAdopcionPorId(id);
        
        if (mascotaAdopcion == null) {
            System.out.println("‚ùå No se encontr√≥ el registro para marcar como adoptado.");
            return false;
        }
        
        if (mascotaAdopcion.getEstado() == EstadoAdopcion.DISPONIBLE) {
            mascotaAdopcion.setEstado(EstadoAdopcion.ADOPTADA);
            System.out.println("‚ú® Mascota marcada como ADOPTADA. ¬°Felicidades!");
            return actualizarMascotaAdopcion(mascotaAdopcion);
        } else {
            System.out.println("‚ö†Ô∏è El estado actual es " + mascotaAdopcion.getEstado().name() + ". Solo se puede marcar como ADOPTADA si est√° DISPONIBLE.");
            return false;
        }
    }
}
