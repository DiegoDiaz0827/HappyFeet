/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Controllador;
import DAO.FacturasDAO;
import Model.Entities.Facturas;
import Model.Enums.EstadoFacturas;
import java.math.BigDecimal;
import java.util.List;
/**
 *
 * @author camper
 */
public class facturasController {
    
    private FacturasDAO facturasDAO;
    public facturasController(FacturasDAO facturasDAO) {
        this.facturasDAO = facturasDAO;
    }

    // 1Ô∏è  Registrar una nueva factura

    public boolean registrarFactura(Facturas factura) {
        if (factura.getDuenoId() <= 0) {
            System.out.println("‚ö†Ô∏è ID de due√±o inv√°lido.");
            return false;
        }
        if (factura.getTotal() == null || factura.getTotal().compareTo(BigDecimal.ZERO) < 0) {
            System.out.println("‚ö†Ô∏è El total de la factura no puede ser nulo o negativo.");
            return false;
        }
        if (factura.getNumeroFactura() == null || factura.getNumeroFactura().isBlank()) {
             System.out.println("‚ö†Ô∏è El n√∫mero de factura es obligatorio.");
            return false;
        }
        
        if (factura.getEstado() == null) {
            factura.setEstado(EstadoFacturas.PENDIENTE);
        }

        try {
            facturasDAO.agregar(factura);
            System.out.println("‚úÖ Factura registrada correctamente con ID: " + factura.getId());
            return true;
        } catch (Exception e) {
            System.out.println("‚ùå Error al registrar factura: " + e.getMessage());
            return false;
        }
    }

    // --- 2Ô∏è Listar todas las facturas

    public List<Facturas> listarFacturas() {
        return facturasDAO.listar();
    }

    // --- 3Ô∏è Buscar factura por ID
    public Facturas obtenerFacturaPorId(int id) {
        if (id <= 0) {
            System.out.println("‚ö†Ô∏è ID inv√°lido.");
            return null;
        }
        return facturasDAO.obtenerPorId(id);
    }

    // --- 4Ô∏è Actualizar factura existente

    public boolean actualizarFactura(Facturas factura) {
        if (factura.getId() <= 0) {
            System.out.println("‚ö†Ô∏è La factura debe tener un ID v√°lido para ser actualizada.");
            return false;
        }
        if (factura.getTotal() == null || factura.getTotal().compareTo(BigDecimal.ZERO) < 0) {
            System.out.println("‚ö†Ô∏è El total actualizado no puede ser nulo o negativo.");
            return false;
        }

        boolean exito = facturasDAO.actualizar(factura);
        System.out.println(exito ? "‚úÖ Factura actualizada correctamente." : "‚ùå No se pudo actualizar la factura (ID no encontrado o error en DAO).");
        return exito;
    }

    // --- 5Ô∏è Eliminar factura

    public boolean eliminarFactura(int id) {
        if (id <= 0) {
            System.out.println("‚ö†Ô∏è ID de factura inv√°lido.");
            return false;
        }

        boolean exito = facturasDAO.eliminar(id);
        System.out.println(exito ? "üóëÔ∏è Factura eliminada correctamente." : "‚ùå No se encontr√≥ la factura con ese ID para eliminar.");
        return exito;
    }
}

