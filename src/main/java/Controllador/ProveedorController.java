/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package Controllador;

import DAO.ProveedorDAO;
import Model.Entities.Proveedor;

import java.time.LocalDateTime;
import java.util.List;

/**
 *
 * @author camper
 */
public class ProveedorController {

    private ProveedorDAO proveedorDAO;

    public ProveedorController(ProveedorDAO proveedorDAO) {
        this.proveedorDAO = proveedorDAO;
    }

    // 1Ô∏è Registrar un nuevo proveedor
    public boolean registrarProveedor(Proveedor proveedor) {
        if (proveedor.getNombreEmpresa() == null || proveedor.getNombreEmpresa().isBlank()) {
            System.out.println("‚ö†Ô∏è El nombre de la empresa es obligatorio.");
            return false;
        }
        if (proveedor.getEmail() != null && !proveedor.getEmail().isBlank() && !proveedor.getEmail().contains("@")) {
            System.out.println("‚ö†Ô∏è El correo electr√≥nico no es v√°lido.");
            return false;
        }
        if (proveedor.getTelefono() != null && proveedor.getTelefono().length() < 7) {
            System.out.println("‚ö†Ô∏è El n√∫mero de tel√©fono parece inv√°lido.");
            return false;
        }

        proveedor.setFechaRegistro(LocalDateTime.now());
        proveedor.setActivo(true);

        try {
            boolean exito = proveedorDAO.insertar(proveedor);
            System.out.println(exito ? "‚úÖ Proveedor registrado correctamente." : "‚ùå No se pudo registrar el proveedor.");
            return exito;
        } catch (Exception e) {
            System.out.println("‚ùå Error al registrar proveedor: " + e.getMessage());
            return false;
        }
    }

    // 2Ô∏è Listar todos los proveedores
    public List<Proveedor> listarProveedores() {
        return proveedorDAO.listar();
    }

    // 3Ô∏è Buscar proveedor por ID
    public Proveedor obtenerProveedorPorId(int id) {
        if (id <= 0) {
            System.out.println("Ô∏è ID inv√°lido.");
            return null;
        }

        // No tienes un m√©todo espec√≠fico en el DAO, as√≠ que buscamos en la lista
        List<Proveedor> lista = proveedorDAO.listar();
        for (Proveedor p : lista) {
            if (p.getId() == id) {
                return p;
            }
        }
        System.out.println(" No se encontr√≥ el proveedor con ID: " + id);
        return null;
    }

    // 4Ô∏è Actualizar un proveedor existente
    public boolean actualizarProveedor(Proveedor proveedor) {
        if (proveedor.getId() <= 0) {
            System.out.println(" El proveedor debe tener un ID v√°lido.");
            return false;
        }
        if (proveedor.getNombreEmpresa() == null || proveedor.getNombreEmpresa().isBlank()) {
            System.out.println("Ô∏è El nombre de la empresa es obligatorio.");
            return false;
        }

        boolean exito = proveedorDAO.actualizar(proveedor);
        System.out.println(exito ? " Proveedor actualizado correctamente." : " No se pudo actualizar el proveedor.");
        return exito;
    }

    // 5Ô∏è Eliminar proveedor
    public boolean eliminarProveedor(int id) {
        if (id <= 0) {
            System.out.println("Ô∏è ID inv√°lido.");
            return false;
        }

        boolean exito = proveedorDAO.eliminar(id);
        System.out.println(exito ? "üóëÔ∏è Proveedor eliminado correctamente." : " No se encontr√≥ el proveedor para eliminar.");
        return exito;
    }
}
    

